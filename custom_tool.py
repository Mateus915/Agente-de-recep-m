from crewai.tools import tool
import requests
import os

@tool("Registrar solicita√ß√£o no Baserow")
def registrar_baserow(data: dict) -> str:
    """
    Registra uma nova solicita√ß√£o na tabela do Baserow (ID: 599992).

    Espera um dicion√°rio com os seguintes campos:
      - mensagem (str): texto da solicita√ß√£o do cliente
      - nivel (str): grau de complexidade
      - departamento (str): √°rea respons√°vel
      - nome (str, opcional): nome do cliente (opcional)

    Todos os campos s√£o obrigat√≥rios, exceto 'nome'.
    """

    # üîí Valida√ß√£o b√°sica do payload antes de fazer o request
    required_fields = ["mensagem", "nivel", "departamento"]
    for field in required_fields:
        if field not in data:
            return f"‚ùå Campo obrigat√≥rio ausente: {field}"

    token = os.getenv("BASEROW_API_TOKEN")
    if not token:
        return "‚ùå Erro: vari√°vel de ambiente BASEROW_API_TOKEN n√£o definida."

    url = "https://api.baserow.io/api/database/rows/table/599992/?user_field_names=false"

    payload = {
        "field_4858851": data.get("nome", "N√£o informado"),
        "field_4858852": data["mensagem"],
        "field_4858860": data["nivel"],
        "field_4858862": data["departamento"],
        "field_4858863": "Aberto"
    }

    headers = {
        "Authorization": f"Token {token}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(url, json=payload, headers=headers)
        if response.status_code == 200:
            return "‚úÖ Solicita√ß√£o registrada com sucesso no Baserow."
        else:
            return f"‚ùå Erro ao registrar no Baserow ({response.status_code}): {response.text}"
    except Exception as e:
        return f"‚ùå Erro na requisi√ß√£o ao Baserow: {str(e)}"

